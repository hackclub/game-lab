---
import "../../global.css";
import { IoSearch, IoCaretDown } from "react-icons/io5";
import { getSession } from "../../lib/game-saving/account";
import Navbar from "../../components/navbar-main";
import StandardHead from "../../components/standard-head.astro";
import Button from "../../components/design-system/button";
import Input from "../../components/design-system/input";
import { getGalleryGames } from "../../lib/game-saving/gallery";

const session = await getSession(Astro.cookies);

const games = await getGalleryGames();
const tags = [
	...new Set(games.reduce<string[]>((p, c) => [...p, ...c.tags], [])),
];

// Put tutorials first and sort everything else alphabetically
games
	.sort((a, b) =>
		a.tags.includes("tutorial") ? -1 : a.title > b.title ? 1 : -1
	)
	.sort((a, _) => (a.tags.includes("tutorial") ? -1 : 1));

// Add isNew attribute to 10 newest games
[...games]
	.sort((a, b) => Date.parse(b.addedOn) - Date.parse(a.addedOn))
	.slice(0, 10)
	.forEach((game) => (game.isNew = true));
---

<html lang="en">
	<head>
		<StandardHead title="Gallery" />

		{
			session.isDark ? (
				<style>{`
					body {
						color: white;
					}
			`}</style>
			) : (
				""
			)
		}
		<style>
			body {
				overflow-y: scroll;
			}

			.copy-container > h1 {
				margin-bottom: 12px;
			}

			p {
				margin: 0;
			}

			.info-split {
				display: flex;
				flex-direction: row;
				gap: 40px;
			}

			.search-container,
			.join-container {
				display: flex;
				flex-direction: column;
				gap: 16px;
			}

			.search-container {
				flex: 2;
			}

			.join-container {
				flex: 1;
			}

			.search-controls {
				display: flex;
				flex-direction: row;
				gap: 10px;
			}

			.search-controls .search {
				flex: 1;
			}

			.select,
			.search {
				display: flex;
				flex-direction: row;
				align-items: center;
				position: relative;
			}

			.select select {
				line-height: 1.2;
				background: var(--bg-btn-inactive);
				color: #ffffff;
				border: none;
				border: 2px solid var(--bg-btn-inactive);
				padding: 8px 12px;
				padding-right: 20px;
				appearance: none;
				display: block;
				font-size: 0.9rem;
				font-family: inherit;
				outline: none;
				width: 100%;
				user-select: none;
			}

			.select svg {
				color: var(--fg-muted);
				pointer-events: none;
				position: absolute;
				right: 8px;
				font-size: 0.9rem;
			}

			.search svg {
				color: #5b5b5b;
				pointer-events: none;
				position: absolute;
				left: 12px;
			}

			.search input {
				padding-left: 32px;
			}

			#games {
				margin-top: 50px;
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
				gap: 14px;
			}

			.game {
				background: var(--accent);
				color: #ffffff;
				padding: 12px;
				user-select: none;
				position: relative;
			}

			.game:hover {
				background: var(--accent-dark);
				color: #ffffff;
			}

			.game .badge {
				position: absolute;
				top: 6px;
				right: 6px;
				text-align: center;
				padding: 4px 10px;
				font-weight: bold;
				box-shadow: 0 2px 4px 0 #00000037;
			}

			.game .badge.new {
				background: #fcc419;
				color: #000000;
			}

			.game .badge.tutorial {
				background: #339af0;
				color: #ffffff;
			}

			.game img {
				display: block;
				width: 100%;
				aspect-ratio: 1;
				background: #ffffff;
				color: #000000; /* For error messages */
				object-fit: contain;
				image-rendering: pixelated;
			}

			.game img:not([data-loaded="true"]) {
				opacity: 0;
			}

			.game p,
			.game h3 {
				overflow: hidden;
				white-space: nowrap;
				text-overflow: ellipsis;
			}

			.game h3 {
				margin: 0;
				margin-top: 10px;
				font-size: 1.2rem;
			}

			.game .author {
				color: var(--fg-muted-on-accent);
				margin-top: 2px;
			}

			.game .tags {
				color: var(--fg-muted-on-accent);
				margin-top: 2px;
				font-size: 0.9rem;
			}
		</style>
	</head>
	<body>
		<Navbar session={session} />

		<div class="copy-container">
			<h1>Gallery</h1>

			<div class="info-split">
				<div class="search-container">
					<p>
						We currently have {games.length} games made by Hack Clubbers.
						Click on any to play in the browser and hack on the code
						in our editor!
					</p>

					<div class="search-controls">
						<div class="select">
							<select id="tag-select">
								<option value="">Filter by tag...</option>
								{
									tags.map((tag) => (
										<option value={tag}>#{tag}</option>
									))
								}
								<option value="_new">Recently added</option>
							</select>

							<IoCaretDown aria-hidden="true" />
						</div>

						<div class="search">
							<IoSearch aria-hidden="true" />
							<Input
								id="search-input"
								placeholder="Search gallery"
							/>
						</div>
					</div>
				</div>

				<div class="join-container">
					<p>
						Add your game to the gallery and get your very own Sprig
						console.
					</p>
					<a href="/get"><Button accent>Add your game</Button></a>
				</div>
			</div>

			<div id="games">
				{
					games.map((game) => (
						<a
							class="game"
							href={`/gallery/${game.filename}`}
							target="_blank"
							data-filename={game.filename}
							data-title={game.title}
							data-author={game.author}
							data-tags={game.tags.join(",")}
							data-is-new={String(game.isNew)}
						>
							{game.tags.includes("tutorial") ? (
								<span class="badge tutorial">Tutorial</span>
							) : game.isNew ? (
								<span class="badge new">New</span>
							) : null}

							<img
								src=""
								alt={`preview of ${game.filename}.js`}
							/>
							<h3>{game.title}</h3>
							<p class="author">by @{game.author}</p>
							<p class="tags">
								{game.tags.map((tag) => `#${tag}`).join(", ")}
							</p>
						</a>
					))
				}
			</div>
		</div>

		<script>
			import { effect, signal } from "@preact/signals";
			import { loadThumbnailUrl } from "../../lib/thumbnail";

			interface GameCard {
				element: HTMLLIElement;
				filename: string;
				title: string;
				author: string;
				tags: string[];
				isNew: boolean;
			}

			const loadImage = async (gameCard: GameCard): Promise<void> => {
				const img = gameCard.element.querySelector(
					"img"
				) as HTMLImageElement;
				if (["loading", "true"].includes(img.dataset.loaded!)) return;
				img.dataset.loaded = "loading";
				img.src = await loadThumbnailUrl(gameCard.filename);
				img.dataset.loaded = "true";
			};

			const gameCards: GameCard[] = [];
			for (const _element of document.querySelectorAll(
				"#games > .game"
			)) {
				const element = _element as HTMLLIElement;
				const gameCard = {
					element,
					filename: element.dataset.filename!,
					title: element.dataset.title!,
					author: element.dataset.author!,
					tags: element.dataset.tags!.split(","),
					isNew: element.dataset.isNew === "true",
				};

				gameCards.push(gameCard);
				new IntersectionObserver((_update) => {
					const update = (_update[0] ||
						_update) as IntersectionObserverEntry;
					if (update.isIntersecting) loadImage(gameCard);
				}).observe(element);
			}

			setTimeout(() => {
				for (const gameCard of gameCards) loadImage(gameCard);
			}, 500);

			const tagSelect = document.getElementById(
				"tag-select"
			) as HTMLSelectElement;
			const searchInput = document.getElementById(
				"search-input"
			) as HTMLInputElement;
			const tag = signal(tagSelect.value);
			const search = signal(searchInput.value);
			tagSelect.addEventListener(
				"change",
				() => (tag.value = tagSelect.value)
			);
			searchInput.addEventListener(
				"input",
				() => (search.value = searchInput.value)
			);

			const isVisible = (gameCard: GameCard): boolean => {
				if (tag.value === "_new") return gameCard.isNew;
				if (tag.value && !gameCard.tags.includes(tag.value))
					return false;
				if (search.value) {
					if (
						gameCard.filename
							.toLowerCase()
							.includes(search.value.toLowerCase())
					)
						return true;
					if (
						gameCard.title
							.toLowerCase()
							.includes(search.value.toLowerCase())
					)
						return true;
					if (
						gameCard.author
							.toLowerCase()
							.includes(search.value.toLowerCase())
					)
						return true;
					return false;
				}
				return true;
			};

			effect(() => {
				for (const gameCard of gameCards) {
					gameCard.element.style.display = isVisible(gameCard)
						? "block"
						: "none";
				}
			});
		</script>
	</body>
</html>
