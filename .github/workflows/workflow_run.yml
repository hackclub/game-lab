name: Send Plagiarism Result On CI Complete

permissions:
  actions: read
  contents: read

on:
  workflow_run:
    workflows: ["Plagiarism Checker"]
    types:
      - completed

jobs:
  on_pr_finish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List Artifacts for Workflow Run
        id: list_artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            console.log(`Listing artifacts for workflow run ID: ${runId}`);
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });
            console.log(`Artifacts found: ${artifacts.data.total_count}`);
            for (const artifact of artifacts.data.artifacts) {
              console.log(`Artifact name: ${artifact.name}, ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes`);
            }
            if (artifacts.data.total_count === 0) {
              throw new Error('No artifacts found for the workflow run');
            }
            const artifact = artifacts.data.artifacts.find(a => a.name === 'plagiarism-report');
            if (!artifact) {
              throw new Error('Plagiarism report artifact not found');
            }
            return artifact.archive_download_url;

      - name: Download Plagiarism Report Artifact Manually
        run: |
          curl -L -o plagiarism-report.zip -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" ${{ steps.list_artifacts.outputs.result }}

      - name: Post Markdown as Comment
        uses: actions/github-script@v7
        env:
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            console.log("Reading the Markdown report from the artifact...");
            const markdownContent = fs.readFileSync(path.join(process.env.GITHUB_WORKSPACE, 'plagiarism_report.md'), 'utf8');

            console.log("Fetching associated workflow run...");
            const runId = process.env.WORKFLOW_RUN_ID;
            console.log(`Looking for workflow run with ID: ${runId}`);
            
            console.log("Fetching associated pull request...");
            const prNumber = ${{ github.event.workflow_run.pull_requests[0].number }};
            console.log(`Found associated pull request: #${prNumber}`);

            console.log("Posting the Markdown content as a comment...");
            const commentResponse = await github.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: markdownContent
            });
            console.log(`Comment posted successfully: ${commentResponse.data.html_url}`);