/*
@author: Daivik Rajesh
@title: Guess the Number
@tags: ['simple', 'guessing']
@addedOn: 2024-07-06

Objective:
  Guess the number chosen by the computer.
*/

const player = "p"
const correctGuess = "c"
const wrongGuess = "w"
const numberSprite = "n"

// Define the player sprite, correct guess sprite, and wrong guess sprite
setLegend(
  [player, bitmap`
................
................
................
................
................
......0000......
.....099990.....
.....090090.....
.....099990.....
......0000......
................
................
................
................
................
................`],
  [correctGuess, bitmap`
................
................
................
................
......2222......
.....255552.....
.....252252.....
.....255552.....
......2222......
................
................
................
................
................
................
................`],
  [wrongGuess, bitmap`
................
................
................
................
......4444......
.....477774.....
.....474474.....
.....477774.....
......4444......
................
................
................
................
................
................
................`],
  [numberSprite, bitmap`
................
................
......3333......
....33..33......
.....3333.......
.....333........
....3333........
....3333........
................
................
................
................
................
................
................`]
)

let minNumber = 1
let maxNumber = 8 // Limited to fit screen height
let level = 1
const maxLevel = 5 // Set maximum levels to 5
const maxY = 15; // Maximum y position for the screen
const maxAttempts = 5; // Maximum attempts per level

let numberToGuess
let attempts
let currentGuess

function resetGame() {
  clearText();
  numberToGuess = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber
  attempts = 0
  currentGuess = minNumber
  clearSprites()
  addGuessSprites()
  updateScreen()
}

let gameOver = false
let canRestart = false

function clearSprites() {
  getAll(player).forEach(sprite => sprite.remove())
  getAll(correctGuess).forEach(sprite => sprite.remove())
  getAll(wrongGuess).forEach(sprite => sprite.remove())
  getAll(numberSprite).forEach(sprite => sprite.remove())
}

function addGuessSprites() {
  clearSprites();
  const yInterval = maxY / maxNumber;
  for (let i = minNumber; i <= maxNumber; i++) {
    addSprite(8, Math.floor(i * yInterval), numberSprite) // Adjusted position to fit larger screen
  }
  addSprite(4, Math.floor(currentGuess * yInterval), player) // Adjusted position to fit larger screen
}

function updateScreen() {
  clearText()
  addText(`Level: ${level}`, { x: 1, y: 0, color: color`1` })
  if (level === 1) {
    addText(`Guess a number`, { x: 1, y: 2, color: color`1` })
    addText(`between ${minNumber} and ${maxNumber}`, { x: 1, y: 3, color: color`1` })
  }
  if (gameOver) {
    addText(`Press 'l' to restart`, { x: 1, y: 4, color: color`1` })
  }
  addText(`Your guess: ${currentGuess}`, { x: 1, y: maxY, color: color`1` }) // Moved to the bottom
  addText(`Attempts left: ${maxAttempts - attempts}`, { x: 1, y: maxY - 2, color: color`1` }) // Show remaining attempts
}

function nextLevel() {
  if (level < maxLevel) {
    level += 1
    maxNumber += 2 // Increase the range for each level
    if (maxNumber > maxY) {
      maxNumber = maxY; // Limit the maximum number to the screen height
    }
    resetGame()
  } else {
    clearText()
    addText(`Congratulations!`, { x: 1, y: 7, color: color`6` })
    addText(`You beat all levels!`, { x: 1, y: 8, color: color`6` })
    gameOver = true
  }
}

setMap(map`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`)

resetGame()

onInput("w", () => {
  if (gameOver) return;
  if (currentGuess > minNumber) {
    currentGuess -= 1
    clearSprites()
    addGuessSprites()
  }
  updateScreen()
})

onInput("s", () => {
  if (gameOver) return;
  if (currentGuess < maxNumber) {
    currentGuess += 1
    clearSprites()
    addGuessSprites()
  }
  updateScreen()
})

onInput("d", () => {
  if (gameOver) return;
  attempts += 1
  const yInterval = maxY / maxNumber;
  if (currentGuess < numberToGuess) {
    addSprite(12, Math.floor(currentGuess * yInterval), wrongGuess) // Adjusted position to fit larger screen
    addText(`Too low!`, { x: 1, y: 6, color: color`3` })
  } else if (currentGuess > numberToGuess) {
    addSprite(12, Math.floor(currentGuess * yInterval), wrongGuess) // Adjusted position to fit larger screen
    addText(`Too high!`, { x: 1, y: 6, color: color`3` })
  } else {
    addSprite(12, Math.floor(currentGuess * yInterval), correctGuess) // Adjusted position to fit larger screen
    const resultText = `Correct! ${attempts} attempts.`
    addText(resultText, { x: 1, y: 6, color: color`7` })
    gameOver = true
    canRestart = true
    return;
  }

  if (attempts >= maxAttempts) {
    addText(`Game Over!`, { x: 1, y: 6, color: color`3` })
    gameOver = true
    canRestart = true
  }

  updateScreen()
})

onInput("l", () => {
  if (!canRestart) return;
  nextLevel()
  canRestart = false
  gameOver = false
})