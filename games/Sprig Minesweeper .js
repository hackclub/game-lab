/*
@title: Minesweeper
@tags: classic
*/

const player = "P";
const mine = "M";
const hidden = "H";
const flag = "F";
const revealed = "R";
const numbers = ["1", "2", "3", "4", "5", "6", "7", "8"];

const mineCount = 10; // Number of mines
const gridSize = 10; // Size of the grid

setLegend(
  [player, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`],
  [mine, bitmap`
................
..1111..1111....
..1111..1111....
..1111111111....
..1111111111....
..1111111111....
..1111111111....
..1111111111....
..1111111111....
..1111111111....
..1111111111....
..1111..1111....
..1111..1111....
................
................
................`],
  [hidden, bitmap`
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111`],
  [flag, bitmap`
................
................
....444444......
....444444......
....444444......
....444444......
....444444......
....444444......
....444444......
....444444......
....444444......
....444444......
................
................
................
................`],
  [revealed, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`],
  ["1", bitmap`
................
................
................
................
................
.......1........
.......1........
.......1........
.......1........
.......1........
.......1........
.......1........
................
................
................
................`],
  ["2", bitmap`
................
................
................
................
................
.....222222.....
..........22....
..........22....
.....222222.....
.....22.........
.....22.........
.....222222.....
................
................
................
................`],
  ["3", bitmap`
................
................
................
................
................
.....333333.....
..........33....
..........33....
.....333333.....
..........33....
..........33....
.....333333.....
................
................
................
................`],
  ["4", bitmap`
................
................
................
................
................
.....44..44.....
.....44..44.....
.....44..44.....
.....444444.....
.........44.....
.........44.....
.........44.....
................
................
................
................`],
  ["5", bitmap`
................
................
................
................
................
.....555555.....
.....55.........
.....55.........
.....555555.....
..........55....
..........55....
.....555555.....
................
................
................
................`],
  ["6", bitmap`
................
................
................
................
................
.....666666.....
.....66.........
.....66.........
.....666666.....
.....66..66.....
.....66..66.....
.....666666.....
................
................
................
................`],
  ["7", bitmap`
................
................
................
................
................
.....777777.....
..........77....
..........77....
..........77....
..........77....
..........77....
..........77....
................
................
................
................`],
  ["8", bitmap`
................
................
................
................
................
.....888888.....
.....88..88.....
.....88..88.....
.....888888.....
.....88..88.....
.....88..88.....
.....888888.....
................
................
................
................`]
);

setBackground(hidden);

let grid = [];
let revealedGrid = [];

function initializeGrid() {
  for (let y = 0; y < gridSize; y++) {
    grid[y] = [];
    revealedGrid[y] = [];
    for (let x = 0; x < gridSize; x++) {
      grid[y][x] = 0;
      revealedGrid[y][x] = false;
    }
  }
  placeMines();
  calculateNumbers();
}

function placeMines() {
  let placedMines = 0;
  while (placedMines < mineCount) {
    let x = Math.floor(Math.random() * gridSize);
    let y = Math.floor(Math.random() * gridSize);
    if (grid[y][x] !== "M") {
      grid[y][x] = "M";
      placedMines++;
    }
  }
}

function calculateNumbers() {
  for (let y = 0; y < gridSize; y++) {
    for (let x = 0; x < gridSize; x++) {
      if (grid[y][x] === "M") continue;
      let count = 0;
      for (let dy = -1; dy <= 1; dy++) {
        for (let dx = -1; dx <= 1; dx++) {
          let ny = y + dy;
          let nx = x + dx;
          if (ny >= 0 && ny < gridSize && nx >= 0 && nx < gridSize && grid[ny][nx] === "M") {
            count++;
          }
        }
      }
      if (count > 0) grid[y][x] = count.toString();
    }
  }
}

function revealCell(x, y) {
  if (x < 0 || x >= gridSize || y < 0 || y >= gridSize || revealedGrid[y][x]) return;
  revealedGrid[y][x] = true;
  clearTile(x, y);
  addSprite(x, y, grid[y][x] === 0 ? revealed : grid[y][x]);
  if (grid[y][x] === 0) {
    for (let dy = -1; dy <= 1; dy++) {
      for (let dx = -1; dx <= 1; dx++) {
        revealCell(x + dx, y + dy);
      }
    }
  }
}

function checkWin() {
  let revealedCount = 0;
  for (let y = 0; y < gridSize; y++) {
    for (let x = 0; x < gridSize; x++) {
      if (revealedGrid[y][x] || grid[y][x] === "M") revealedCount++;
    }
  }
  if (revealedCount === gridSize * gridSize) {
    addText("YOU WIN!", { x: 1, y: gridSize + 1, color: color`2` });
  }
}

let cursorX = 0;
let cursorY = 0;

initializeGrid();
setMap(createMap());
setPushables({ [player]: [] });

function createMap() {
  let map = "";
  for (let y = 0; y < gridSize; y++) {
    for (let x = 0; x < gridSize; x++) {
      map += hidden;
    }
    map += "\n";
  }
  return map;
}

addSprite(cursorX, cursorY, player);

onInput("w", () => moveCursor(0, -1));
onInput("s", () => moveCursor(0, 1));
onInput("a", () => moveCursor(-1, 0));
onInput("d", () => moveCursor(1, 0));
onInput("j", () => revealCurrentCell());
onInput("k", () => toggleFlag());

function moveCursor(dx, dy) {
  let newX = cursorX + dx;
  let newY = cursorY + dy;
  if (newX >= 0 && newX < gridSize && newY >= 0 && newY < gridSize) {
    clearTile(cursorX, cursorY);
    cursorX = newX;
    cursorY = newY;
    addSprite(cursorX, cursorY, player);
  }
}

function revealCurrentCell() {
  if (!revealedGrid[cursorY][cursorX] && grid[cursorY][cursorX] === "M") {
    revealAllMines();
    addText("GAME OVER", { x: 1, y: gridSize + 1, color: color`3` });
  } else {
    revealCell(cursorX, cursorY);
    checkWin();
  }
}

function revealAllMines() {
  for (let y = 0; y < gridSize; y++) {
    for (let x = 0; x < gridSize; x++) {
      if (grid[y][x] === "M") {
        clearTile(x, y);
        addSprite(x, y, mine);
      }
    }
  }
}

function toggleFlag() {
  if (tilesWith(player, flag).length > 0) {
    clearTile(cursorX, cursorY);
    addSprite(cursorX, cursorY, player);
  } else if (!revealedGrid[cursorY][cursorX]) {
    addSprite(cursorX, cursorY, flag);
  }
}
